**Flag** ,,**PCRE** ,**ICU** ,**Boost.Regex** ,**std::regex** ,**RE2** 
/i ,case insensitive ,o ,o ,,,o 
/m ,multi-line ,o ,o ,,,o 
/s ,dot matches anything ,o ,o ,,,o 
/x ,ignore whitespace and comments ,o ,o ,,,o 
/U ,minimal match ,o ,x ,,,o 
**Operator** ,,**PCRE** ,**ICU** ,**Boost.Regex** ,**std::regex** ,**RE2** 
* ,match 0 or more times ,o ,o ,? ,? ,o 
+ ,match 1 or more times ,o ,o ,,,o 
?? ,match 0 or 1 times ,o ,o ,,,o 
{n} ,match n times ,o ,o ,,,o 
"{n,} ",match n or more times ,o ,o ,,,o 
"{n,m} ",match between n and m times ,o ,o ,,,o 
*? ,"match 0 or more times, not greedy ",o ,o ,,,o 
? ,"match 1 or more times, not greedy ",o ,o ,,,o 
??? ,"match 0 or 1 times, not greedy ",o ,o ,,,o 
{n}? ,match n times ,o ,o ,,,o 
"{n,}? ","match n or more times, not greedy ",o ,o ,,,o 
"{n,m}? ","match between n and m times, not greedy ",o ,o ,,,o 
*+ ,"match 0 or more times, possessive ",o ,o ,,,x 
+ ,"match 1 or more times, possessive ",o ,o ,,,x 
?? ,"match 0 or 1 times, possessive ",o ,o ,,,x 
{n}+ ,match n times ,o ,o ,,,x 
"{n,}+ ","match n or more times, possessive ",o ,o ,,,x 
"{n,m}+ ","match between n and m times, possessive ",o ,o ,,,x 
( ... ) ,capturing group ,o ,o ,,,o 
(?: ... ) ,group ,o ,o ,,,o 
(?> ... ) ,atomic grouping ,o ,o ,,,x 
(?# ... ) ,comment ,o ,o ,,,x 
(?= ... ) ,look-ahead assertion ,o ,o ,,,x 
(?! ... ) ,negative look-ahead assertion ,o ,o ,,,x 
(?<= ... ) ,look-behind assertion ,o ,o ,,,x 
(?<! ... ) ,negative look-behind assertion ,o ,o ,,,x 
(?flags: ... ) ,flags change ,o ,,,,o 
(?flags) ,flags change ,o ,o ,,,o 
(?P<name> ...) ,named capturing group ,o ,x ,,,o 
(?<name> ...) ,named capturing group ,o ,x ,,,x 
(?'name' ...) ,named capturing group ,o ,x ,,,x 
...) ,branch reset ,o ,x ,,,x 
**Characters**,,**PCRE** ,**ICU** ,**Boost.Regex** ,**std::regex** ,**RE2** 
\\a ,BELL ,o ,o ,,,
\\A ,beginning of input ,o ,o ,,,
\\b inside a [set] ,BACKSPACE ,o ,,,,
\\b outside a [set] ,on a word boundary ,o ,,,,
\\B ,not on a word boundary ,o ,o ,,,
\\cX ,ASCII control character X ,o ,o ,,,
\\d ,digit ,o ,o ,,,
\\D ,non digit ,o ,o ,,,
\\e ,ESCAPE ,o ,o ,,,
\\E ,end of \Q ... \E quoting ,o ,o ,,,
\\f ,FORM FEED ,o ,o ,,,
\\G ,end of previous match ,o ,o ,,,
\\n ,LINE FEED ,o ,,,,
\\N{x} ,UNICODE CHARACTER NAME x ,x ,o ,,,
\\p{x} ,UNICODE PROPERTY NAME x ,o ,o ,,,
\\P{x} ,UNICODE PROPERTY NAME not x ,o ,o ,,,
\\Q ,start of \Q ... \E quoting ,o ,o ,,,
\\r ,CARRIAGE RETURN ,o ,o ,,,
\\s ,white space ,o ,o ,,,
\\S ,non white space ,o ,o ,,,
\\t ,HORIZONTAL TAB ,o ,o ,,,
\\uhhhh ,U+hhhh (between U+0000 and U+FFFF) ,x ,,,,
\\Uhhhhhhhh ,U+hhhhhhhh (between U+00000000 and U+0010FFFF) ,x ,,,,
\\v ,VERTICAL TAB ,o ,x ,,,
\\w ,word character ,o ,o ,,,
\\W ,non word character ,o ,o ,,,
\\x{hhhh} ,U+hhhh ,o (0-10FFFF) ,o (0-10FFFF) ,,,
\\xhhhh ,U+hhhh ,o (00-FF) ,o (00-FF) ,,,
\\X ,grapheme cluster ,x ,,,,
\\Z ,end of input (or before the final ) ,o ,o ,,,
\\z ,end of input ,o ,o ,,,
\\n ,n-th backreference ,o ,,,,
\\0ooo ,ASCII/Latin-1 character 0ooo ,o ,,,,
. ,any character but newlines ,o ,o ,,,
^ ,line beginning ,o ,o ,,,
$ ,line end ,o ,o ,,,
\\ ,quote the following symbol ,o ,o ,,,
[pattern] ,set ,o ,o ,,,
